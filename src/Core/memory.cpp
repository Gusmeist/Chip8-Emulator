#include "memory.h"

Memory::Memory()
{
	Reset();
}

Memory::~Memory()
{
	delete[] Data;
}

void Memory::Reset()
{
	// Clear the ram to 0s
	for (int i = 0; i < MEMORY_SIZE; i++)
	{
		Data[i] = 0x00;
	}

	// A predefined font in the form of bytes
	Byte fontData[] =
	{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};

	// Loads the font into the memory, starting at address 0x0050
	for (Word c = FONT_ADDRESS; c <= FONT_ADDRESS + (5 * 16); c++)
	{
		// Subtracts 0x0050 to count both arrays with the same variable.
		// 0x0050 is the offset from address 0 that the font data will start on,
		// so this corrects for that offset.
		Data[c] = fontData[c - FONT_ADDRESS];
	}

	stack.Reset();
}